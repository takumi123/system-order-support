// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  status      String   // ACTIVE, ARCHIVED, COMPLETED
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  requirementCategories RequirementCategory[]
  requirementDocuments  RequirementDocument[]
}

model RequirementCategory {
  id          String   @id @default(cuid())
  name        String
  projectId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project       Project                @relation(fields: [projectId], references: [id], onDelete: Cascade)
  subCategories RequirementSubCategory[]
}

model RequirementSubCategory {
  id          String   @id @default(cuid())
  name        String
  content     String?  @db.Text
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category    RequirementCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  tags        RequirementTag[]
}

model RequirementTag {
  id             String   @id @default(cuid())
  name           String
  subCategoryId  String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  subCategory    RequirementSubCategory @relation(fields: [subCategoryId], references: [id], onDelete: Cascade)
}

model RequirementDocument {
  id          String   @id @default(cuid())
  name        String
  url         String
  blobUrl     String
  analysis    String?  @db.Text
  projectId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}
