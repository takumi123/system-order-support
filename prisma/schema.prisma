// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  memberships   TeamMembership[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Team {
  id          String    @id @default(cuid())
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  subscription Subscription?
  members      TeamMembership[]
  projects     Project[]
}

model TeamMembership {
  id        String    @id @default(cuid())
  role      String    // ADMIN, MEMBER
  teamId    String
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  team      Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
}

model Subscription {
  id        String    @id @default(cuid())
  teamId    String    @unique
  plan      String    // FREE, PRO, ENTERPRISE
  status    String    // ACTIVE, CANCELED, PAST_DUE
  startDate DateTime  @default(now())
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  team      Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model Project {
  id          String    @id @default(cuid())
  name        String
  description String?
  status      String    // ACTIVE, ARCHIVED, COMPLETED
  teamId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  team        Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
}
